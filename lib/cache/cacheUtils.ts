// lib/cache/cacheUtils.ts
import { cacheDB } from './indexedDB';

/**
 * Fonction utilitaire pour g√©rer le cache avec stale-while-revalidate
 */
export async function getCachedOrFetch<T>(
  storeName: string,
  cacheKey: string,
  fetchFn: () => Promise<T>,
  ttlMinutes: number = 30
): Promise<T> {
  try {
    // 1. V√©rifier le cache
    const cached = await cacheDB.get<T>(storeName, cacheKey);
    
    if (cached) {
      console.log(`üì¶ Donn√©es charg√©es depuis le cache: ${cacheKey}`);
      
      // Rafra√Æchir en arri√®re-plan (stale-while-revalidate)
      fetchFn()
        .then(fresh => {
          cacheDB.set(storeName, cacheKey, fresh, ttlMinutes);
        })
        .catch(err => {
          console.error(`Erreur lors du rafra√Æchissement de ${cacheKey}:`, err);
        });
      
      return cached;
    }

    // 2. Pas de cache, charger depuis l'API
    console.log(`üåê Chargement depuis l'API: ${cacheKey}`);
    const fresh = await fetchFn();
    
    // 3. Sauvegarder dans le cache
    await cacheDB.set(storeName, cacheKey, fresh, ttlMinutes);
    
    return fresh;
  } catch (error) {
    console.error(`Erreur lors du chargement de ${cacheKey}:`, error);
    
    // En cas d'erreur, essayer de r√©cup√©rer le cache m√™me expir√©
    const staleCache = await cacheDB.get<T>(storeName, cacheKey);
    if (staleCache) {
      console.log(`‚ö†Ô∏è Utilisation du cache expir√© pour ${cacheKey} (mode hors ligne)`);
      return staleCache;
    }
    
    throw error;
  }
}

/**
 * Invalider le cache d'une cl√© sp√©cifique
 */
export async function invalidateCache(storeName: string, cacheKey: string): Promise<void> {
  await cacheDB.delete(storeName, cacheKey);
  console.log(`üóëÔ∏è Cache invalid√©: ${cacheKey}`);
}

/**
 * Invalider tout le cache d'un store
 */
export async function invalidateStoreCache(storeName: string): Promise<void> {
  await cacheDB.clear(storeName);
  console.log(`üóëÔ∏è Store cache invalid√©: ${storeName}`);
}

/**
 * Invalider tout le cache
 */
export async function invalidateAllCache(): Promise<void> {
  await cacheDB.clearAll();
  console.log('üóëÔ∏è Tout le cache a √©t√© invalid√©');
}

/**
 * Pr√©-charger des donn√©es dans le cache
 */
export async function prefetchToCache<T>(
  storeName: string,
  cacheKey: string,
  data: T,
  ttlMinutes: number = 30
): Promise<void> {
  await cacheDB.set(storeName, cacheKey, data, ttlMinutes);
  console.log(`üíæ Donn√©es pr√©-charg√©es dans le cache: ${cacheKey}`);
}

/**
 * V√©rifier si une cl√© existe dans le cache (non expir√©e)
 */
export async function isCached(storeName: string, cacheKey: string): Promise<boolean> {
  const cached = await cacheDB.get(storeName, cacheKey);
  return cached !== null;
}

/**
 * Obtenir les statistiques du cache
 */
export async function getCacheStats(): Promise<{
  hasProducts: boolean;
  hasSettings: boolean;
  hasExchangeRates: boolean;
  hasClients: boolean;
}> {
  return {
    hasProducts: await isCached('products', 'all_products'),
    hasSettings: await isCached('settings', 'settings_'),
    hasExchangeRates: await isCached('exchangeRates', 'rates'),
    hasClients: await isCached('clients', 'all_clients'),
  };
}